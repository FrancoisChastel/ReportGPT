from langchain.callbacks import StreamlitCallbackHandler
import streamlit as st
import pandas as pd
import os
import openai


from pages.files.main import InitializeReporter


file_formats = {
    "xlsx": pd.read_excel,
}


def clear_submit():
    """
    Clear the Submit Button State
    Returns:

    """
    st.session_state["submit"] = False


@st.cache_data(ttl="2h")
def load_data(uploaded_file):
    try:
        ext = os.path.splitext(uploaded_file.name)[1][1:].lower()
    except Exception:
        ext = uploaded_file.split(".")[-1]
    if ext in file_formats:
        return file_formats[ext](uploaded_file)
    else:
        st.error(f"Unsupported file format: {ext}")
        return None


st.set_page_config(
    page_title="ReportGPT - Generez des rapports avec vos donn√©es", page_icon="ü§ñ"
)
st.title("ü§ñ ReportGPT - Generez des rapports avec vos donn√©es")

openai_api_key = st.sidebar.text_input(
    "Cl√© d'API OpenAI",
    type="password",
)

intermediate_reports = st.sidebar.checkbox("Activer les rapports interm√©diaires")


uploaded_declarations = st.sidebar.file_uploader(
    "T√©l√©versez le fichier des d√©clarations",
    type=list(file_formats.keys()),
    help="Les formats : xlsx sont support√©s",
    on_change=clear_submit,
)

uploaded_contribuables = st.sidebar.file_uploader(
    "T√©l√©versez le fichier des contribuables",
    type=list(file_formats.keys()),
    help="Les formats : xlsx sont support√©s",
    on_change=clear_submit,
)

uploaded_quittances = st.sidebar.file_uploader(
    "T√©l√©versez le fichier des quittances",
    type=list(file_formats.keys()),
    help="Les formats : xlsx sont support√©s",
    on_change=clear_submit,
)

uploaded_amr = st.sidebar.file_uploader(
    "T√©l√©versez le fichier des AMR",
    type=list(file_formats.keys()),
    help="Les formats : xlsx sont support√©s",
    on_change=clear_submit,
)

uploaded_recours = st.sidebar.file_uploader(
    "T√©l√©versez le fichier des recours",
    type=list(file_formats.keys()),
    help="Les formats : xlsx sont support√©s",
    on_change=clear_submit,
)

uploaded_notifications = st.sidebar.file_uploader(
    "T√©l√©versez le fichier des notifications",
    type=list(file_formats.keys()),
    help="Les formats : xlsx sont support√©s",
    on_change=clear_submit,
)

if "messages" not in st.session_state or st.sidebar.button(
    "Nettoyer l'historique de conversation"
):
    st.session_state["messages"] = [
        {
            "role": "assistant",
            "content": "Bonjour je suis FileGPT ! Je g√©n√©re des rapports pour l'administration Mauritanienne!",
        }
    ]

if not openai_api_key:
    st.info("Ajoutez une cl√© d'API OpenAI pour continuer.")
    st.stop()

for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])


if st.button(label="G√©n√©rer le rapport"):
    st.session_state.messages.append(
        {"role": "user", "content": "G√©n√®re les rapports des fichiers ajout√©s"}
    )

    with st.spinner("Analyse des fichiers, cela peut prendre plusieurs minutes"):
        reporters = InitializeReporter(
            uploaded_declarations,
            uploaded_contribuables,
            uploaded_quittances,
            uploaded_amr,
            uploaded_recours,
            uploaded_notifications,
            openai_api_key,
        )
        st.success("Fichiers analys√©s !", icon="üî•")

    notes = []
    for report in reporters:
        with st.chat_message("assistant"):
            st_callback = StreamlitCallbackHandler(st.container())
            with st.spinner("Je r√©flechis"):
                response = report.summarize(summarise=intermediate_reports)
                st.session_state.messages.append(
                    {"role": "assistant", "content": response}
                )
            with st.expander(
                label=f"Rapport de {report.title}",
            ):
                st.markdown(response)
                notes.append(response)
    client = openai.OpenAI(api_key=openai_api_key)
    with st.spinner("Je conclus"):
        messages = [
            {
                "role": "system",
                "content": "Tu es un attach√© au directeur des imp√¥ts Mauritanienne, tu fais des rapports d'analyses en francais √† destination de la direction. Tes rapports doivent √™tre court et synth√©tiques, exposant l'√©tat des lieux et les tendances, tu fournis une analyse avec des explications ainsi que des recommandations. Une attention sur les tendances est attendue.",
            },
            {
                "role": "user",
                "content": "\r\n".join(notes),
            },
        ]

        response = (
            client.chat.completions.create(
                model="gpt-3.5-turbo-16k",
                messages=messages,
                temperature=0.15,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0,
            )
            .choices[0]
            .message.content
        )

        st.markdown(response)
    st.success("Le rapport a √©t√© g√©n√©r√© avec succ√©s", icon="üî•")
